package com.aiwujie.shengmo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.aiwujie.shengmo.bean.SwitchMarkBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SWITCH_MARK_BEAN".
*/
public class SwitchMarkBeanDao extends AbstractDao<SwitchMarkBean, Long> {

    public static final String TABLENAME = "SWITCH_MARK_BEAN";

    /**
     * Properties of entity SwitchMarkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, long.class, "uid", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Headimage = new Property(4, String.class, "headimage", false, "HEADIMAGE");
        public final static Property T_sign = new Property(5, String.class, "t_sign", false, "T_SIGN");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Sexual = new Property(7, String.class, "sexual", false, "SEXUAL");
        public final static Property Url_token = new Property(8, String.class, "url_token", false, "URL_TOKEN");
    }


    public SwitchMarkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SwitchMarkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SWITCH_MARK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: uid
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"PASSWORD\" TEXT," + // 3: password
                "\"HEADIMAGE\" TEXT," + // 4: headimage
                "\"T_SIGN\" TEXT," + // 5: t_sign
                "\"SEX\" TEXT," + // 6: sex
                "\"SEXUAL\" TEXT," + // 7: sexual
                "\"URL_TOKEN\" TEXT);"); // 8: url_token
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SWITCH_MARK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SwitchMarkBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String headimage = entity.getHeadimage();
        if (headimage != null) {
            stmt.bindString(5, headimage);
        }
 
        String t_sign = entity.getT_sign();
        if (t_sign != null) {
            stmt.bindString(6, t_sign);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String sexual = entity.getSexual();
        if (sexual != null) {
            stmt.bindString(8, sexual);
        }
 
        String url_token = entity.getUrl_token();
        if (url_token != null) {
            stmt.bindString(9, url_token);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SwitchMarkBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String headimage = entity.getHeadimage();
        if (headimage != null) {
            stmt.bindString(5, headimage);
        }
 
        String t_sign = entity.getT_sign();
        if (t_sign != null) {
            stmt.bindString(6, t_sign);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String sexual = entity.getSexual();
        if (sexual != null) {
            stmt.bindString(8, sexual);
        }
 
        String url_token = entity.getUrl_token();
        if (url_token != null) {
            stmt.bindString(9, url_token);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SwitchMarkBean readEntity(Cursor cursor, int offset) {
        SwitchMarkBean entity = new SwitchMarkBean( //
            cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headimage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // t_sign
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sexual
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // url_token
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SwitchMarkBean entity, int offset) {
        entity.setUid(cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadimage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setT_sign(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSexual(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrl_token(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SwitchMarkBean entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SwitchMarkBean entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SwitchMarkBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
